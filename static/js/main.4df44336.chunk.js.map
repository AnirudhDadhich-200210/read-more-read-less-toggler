{"version":3,"sources":["../../src/styled/index.js","../../src/styled/mediaQueries.js","../../src/index.js","App.js","index.js"],"names":["Paragraph","styled","props","ReadMoreWrapper","Caret","BREAKPOINTS","small","mobile","tablet","desktop","giant","ReadMoreToggler","Object","size","accumulator","css","children","useState","readMore","setReadMore","isParagraphExceed","setIsParagraphExceed","paragraphRef","useRef","isOverflow","paragraphHeight","setParagraphHeight","childrenScrollHeight","setChildrenScrollHeight","toggleHandler","console","calculateHeight","calculatedLineHeight","window","elementStyle","lineHeight","parseInt","calculatedParagraphHeight","scrollHeight","useEffect","ReadMoreTextToggler","onClick","collapse","ref","App","ReactDOM","render","document","getElementById"],"mappings":"gWAEO,I,EAAMA,EAAYC,IAAH,6OACN,mBAAWC,EAAX,mBAEM,mBAClBA,YADkB,gDAED,mBAAWA,YAAX,UACQ,mBAAWA,YAAX,UACA,mBAAWA,YAAX,iBACb,mBAAYA,sBAAZ,YAKHC,EAAkBF,IAAH,cAArB,oKAUMG,EAAQH,IAAH,mLAMC,mBAAWC,YAAX,SC7BNG,EAAc,CACzBC,MADyB,IAEzBC,OAFyB,IAGzBC,OAHyB,IAIzBC,QAJyB,IAKzBC,MAAO,MCHIC,GDOQC,OAAA,gBAAgC,cACnD,IAAMC,EAAOR,EAAb,GAMA,OALAS,KAAqB,kBAAaC,YAAZ,IAAD,qEAEfA,iBAFe,aAKrB,IAPF,ICP+B,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAChC,EAAgCC,oBAAhC,GAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkDF,oBAAlD,GAAOG,EAAP,KAA0BC,EAA1B,KACMC,EAAeC,mBACfC,EAAaJ,IAAnB,EACA,EAA8CH,qBAAvCQ,EAAP,KAAwBC,EAAxB,KACA,EAAwDT,qBAAjDU,EAAP,KAA6BC,EAA7B,KAEMC,EAAgB,WACpBV,MACAW,YAAY,CAAEH,0BAGVI,EAAkB,WAAM,MAGtBC,EADeC,wBAAwBX,EAA7C,SAC6BY,iBAA7B,eAGMC,EAAaC,SAASJ,EAA5B,IAIMK,GADqBJ,kBAAoB5B,EAA/C,OACwD,EAAtB,GAAlC,EACAqB,KACA,IAAMY,EAAY,UAAGhB,EAAH,4BAAGA,EAArB,aACAM,KAEAP,EADiCgB,EAAjC,IAIFE,qBAAU,WAKR,OAJAN,oCACAF,IAGO,WACLE,0CANJM,IAWA,IAAMC,EAAsB,kBAC1BpB,GACE,qBAAiBqB,QAASZ,GACxB,qBAAOa,SAAUlB,IAChBN,EAAW,YAJU,cAQ5B,OACE,6BACE,qBACEwB,SADF,EAEEjB,gBAAiBP,EAAcS,EAAN,KAAoCF,EAF/D,KAGEkB,IAAKrB,GAJT,GAQE,oBATJ,SCxCasB,G,MATH,WACV,OACE,kBAAC,EAAD,ykBCDJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4df44336.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Paragraph = styled.p`\n  max-height: ${(props) => props.paragraphHeight};\n  overflow: hidden;\n  background-image: ${(props) =>\n    props.collapse && 'linear-gradient(to top,#FFFFFF,#25232363);'};\n  background-clip: ${(props) => props.collapse && 'text'};\n  -webkit-background-clip: ${(props) => props.collapse && 'text'};\n  -webkit-text-fill-color: ${(props) => props.collapse && 'transparent'};\n  transition: ${(props) => (props.collapse ? 'all 0.1s' : 'all 1s')};\n  line-height: 22px;\n  margin: 10px;\n`\n\nexport const ReadMoreWrapper = styled.span`\n  cursor: pointer;\n  text-transform: uppercase;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 20.8px;\n  position: relative;\n  margin: 10px;\n`\n\nexport const Caret = styled.span`\n  width: 9px;\n  height: 9px;\n  border: 1px solid blue;\n  border-top-width: 0;\n  border-right-width: 0;\n  margin-bottom: ${(props) => props.collapse && '3px'};\n  margin-right: 12.5px;\n`\n","import { css } from 'styled-components'\n\nexport const BREAKPOINTS = {\n  small: 375,\n  mobile: 576,\n  tablet: 768,\n  desktop: 992,\n  giant: 1200\n}\n\n// iterate through the sizes and create a media template\nconst mediaqueries = Object.keys(BREAKPOINTS).reduce((accumulator, label) => {\n  const size = BREAKPOINTS[label]\n  accumulator[label] = (...args) => css`\n    @media (max-width: ${size}px) {\n      ${css(...args)};\n    }\n  `\n  return accumulator\n}, {})\n\nexport default mediaqueries\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Paragraph, ReadMoreWrapper, Caret } from './styled/index'\nimport { BREAKPOINTS } from './styled/mediaQueries'\n\nexport const ReadMoreToggler = ({ children }) => {\n  const [readMore, setReadMore] = useState(false)\n  const [isParagraphExceed, setIsParagraphExceed] = useState(false)\n  const paragraphRef = useRef()\n  const isOverflow = isParagraphExceed && !readMore\n  const [paragraphHeight, setParagraphHeight] = useState()\n  const [childrenScrollHeight, setChildrenScrollHeight] = useState()\n\n  const toggleHandler = () => {\n    setReadMore(!readMore)\n    console.log({ childrenScrollHeight })\n  }\n\n  const calculateHeight = () => {\n    // dynamically set the current div line-height\n    const elementStyle = window.getComputedStyle(paragraphRef.current)\n    const calculatedLineHeight = elementStyle.getPropertyValue('line-height')\n\n    // remove px from line-height value\n    const lineHeight = parseInt(calculatedLineHeight, 10)\n\n    // isoverflow calculations\n    const isMobileBreakpoint = window.innerWidth < BREAKPOINTS.mobile\n    const calculatedParagraphHeight = (isMobileBreakpoint ? 5 : 3) * lineHeight\n    setParagraphHeight(calculatedParagraphHeight)\n    const scrollHeight = paragraphRef.current?.scrollHeight\n    setChildrenScrollHeight(scrollHeight)\n    const isParagraphHeightGreater = calculatedParagraphHeight < scrollHeight\n    setIsParagraphExceed(isParagraphHeightGreater)\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', calculateHeight)\n    calculateHeight()\n\n    // to remove event listner on unmount\n    return () => {\n      window.removeEventListener('resize', calculateHeight)\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const ReadMoreTextToggler = () =>\n    isParagraphExceed && (\n      <ReadMoreWrapper onClick={toggleHandler}>\n        <Caret collapse={isOverflow} />\n        {readMore ? 'READ LESS' : 'READ MORE'}\n      </ReadMoreWrapper>\n    )\n\n  return (\n    <div>\n      <Paragraph\n        collapse={isOverflow}\n        paragraphHeight={readMore ? `${childrenScrollHeight}px` : `${paragraphHeight}px`}\n        ref={paragraphRef}\n      >\n        {children}\n      </Paragraph>\n      <ReadMoreTextToggler />\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { ReadMoreToggler } from 'read-more-read-less-toggler'\nimport 'read-more-read-less-toggler/dist/index.css'\n\nconst App = () => {\n  return (\n    <ReadMoreToggler>\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n\n    </ReadMoreToggler>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}